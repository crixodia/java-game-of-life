/*
 * Copyright (C) 2021 Cristian Bastidas
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package Interface;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;

/**
 *
 * @author gabri
 */
public class GIF extends javax.swing.JFrame {

    /**
     * Creates new form GIF
     */
    File inputPath,
            /**
             * Creates new form GIF
             */
            outputPath;
    Color background, grid_border, state;
    ControlGui frame;

    public GIF(ControlGui life) {
        frame = life;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fd = new javax.swing.JFileChooser();
        BtnOuput = new javax.swing.JButton();
        CheckRandColors = new javax.swing.JCheckBox();
        BtnBackground = new javax.swing.JButton();
        TxtInput = new javax.swing.JTextField();
        BtnGridBorder = new javax.swing.JButton();
        BtnInput = new javax.swing.JButton();
        BtnState = new javax.swing.JButton();
        LblInput = new javax.swing.JLabel();
        BtnStart = new javax.swing.JButton();
        LblOutput = new javax.swing.JLabel();
        TxtOutput = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GIF Generator");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        BtnOuput.setText("...");
        BtnOuput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnOuputActionPerformed(evt);
            }
        });

        CheckRandColors.setSelected(true);
        CheckRandColors.setText("Random colors");
        CheckRandColors.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                CheckRandColorsStateChanged(evt);
            }
        });

        BtnBackground.setText("Background");
        BtnBackground.setEnabled(false);
        BtnBackground.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBackgroundActionPerformed(evt);
            }
        });

        BtnGridBorder.setText("Grid Border");
        BtnGridBorder.setEnabled(false);
        BtnGridBorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnGridBorderActionPerformed(evt);
            }
        });

        BtnInput.setText("...");
        BtnInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnInputActionPerformed(evt);
            }
        });

        BtnState.setText("State");
        BtnState.setEnabled(false);
        BtnState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnStateActionPerformed(evt);
            }
        });

        LblInput.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LblInput.setText("Input File:");

        BtnStart.setText("Start");
        BtnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnStartActionPerformed(evt);
            }
        });

        LblOutput.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LblOutput.setText("Outpu folder:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(LblInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LblOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TxtInput)
                            .addComponent(TxtOutput))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BtnInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnOuput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BtnBackground)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BtnGridBorder, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BtnState, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                            .addComponent(BtnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CheckRandColors)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnInput)
                    .addComponent(LblInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TxtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnOuput)
                    .addComponent(LblOutput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CheckRandColors)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnBackground)
                    .addComponent(BtnGridBorder)
                    .addComponent(BtnState))
                .addGap(7, 7, 7)
                .addComponent(BtnStart)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void BtnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnStartActionPerformed
        if (this.CheckRandColors.isSelected()) {
            background = randomColor();
            grid_border = randomColor();
            state = randomColor();
        }
        try {
            frame.startNFT(
                    inputPath,
                    outputPath,
                    background,
                    grid_border,
                    state
            );
        } catch (IOException | NoSuchAlgorithmException ex) {
            Logger.getLogger(GIF.class.getName()).log(Level.SEVERE, null, ex);
        }
        frame.setEnabled(true);
        this.dispose();
    }//GEN-LAST:event_BtnStartActionPerformed

    private Color randomColor() {
        Random rand = new Random();
        float r = rand.nextFloat();
        float g = rand.nextFloat();
        float b = rand.nextFloat();
        return new Color(r, g, b);
    }

    private void CheckRandColorsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_CheckRandColorsStateChanged
        this.BtnBackground.setEnabled(!this.CheckRandColors.isSelected());
        this.BtnGridBorder.setEnabled(!this.CheckRandColors.isSelected());
        this.BtnState.setEnabled(!this.CheckRandColors.isSelected());
    }//GEN-LAST:event_CheckRandColorsStateChanged

    private void BtnInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnInputActionPerformed
        fd.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int _fd = fd.showDialog(this, "Open");
        if (_fd == JFileChooser.APPROVE_OPTION) {
            inputPath = fd.getSelectedFile();
            this.TxtInput.setText(inputPath.toString());
        }
    }//GEN-LAST:event_BtnInputActionPerformed

    private void BtnOuputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnOuputActionPerformed
        fd.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int _fd = fd.showDialog(this, "Open");
        if (_fd == JFileChooser.APPROVE_OPTION) {
            outputPath = fd.getSelectedFile();
            this.TxtOutput.setText(outputPath.toString());
        }
    }//GEN-LAST:event_BtnOuputActionPerformed

    private void BtnBackgroundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBackgroundActionPerformed
        Color newColor = JColorChooser.showDialog(null, "Background color", Color.BLACK);
        if (newColor != null) {
            this.BtnBackground.setBackground(newColor);
            background = newColor;
        }
    }//GEN-LAST:event_BtnBackgroundActionPerformed

    private void BtnGridBorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnGridBorderActionPerformed
        Color newColor = JColorChooser.showDialog(null, "Border color", Color.BLACK);
        if (newColor != null) {
            this.BtnGridBorder.setBackground(newColor);
            grid_border = newColor;
        }
    }//GEN-LAST:event_BtnGridBorderActionPerformed

    private void BtnStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnStateActionPerformed
        Color newColor = JColorChooser.showDialog(null, "Border color", Color.BLACK);
        if (newColor != null) {
            this.BtnState.setBackground(newColor);
            state = newColor;
        }
    }//GEN-LAST:event_BtnStateActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        frame.setEnabled(true);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GIF(null).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnBackground;
    private javax.swing.JButton BtnGridBorder;
    private javax.swing.JButton BtnInput;
    private javax.swing.JButton BtnOuput;
    private javax.swing.JButton BtnStart;
    private javax.swing.JButton BtnState;
    private javax.swing.JCheckBox CheckRandColors;
    private javax.swing.JLabel LblInput;
    private javax.swing.JLabel LblOutput;
    private javax.swing.JTextField TxtInput;
    private javax.swing.JTextField TxtOutput;
    private javax.swing.JFileChooser fd;
    // End of variables declaration//GEN-END:variables
}
